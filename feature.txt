---
- name: Bond two interfaces and revert if it fails to ping the gateway
  hosts: all
  become: yes
  gather_facts: yes

  tasks:
    - name: Get the primary interface from facts
      set_fact:
        primary_interface: "{{ ansible_default_ipv4.interface }}"
    
    - name: Gather network interfaces for the host
      ansible.builtin.debug:
        var: ansible_facts['ansible_interfaces']
    
    - name: Check if primary interface has VLAN
      shell: "ip -o link show | grep '{{ primary_interface }}' | grep -c '\.'"
      register: vlan_check
      changed_when: False

    - name: Set VLAN tag fact if a VLAN is present
      set_fact:
        vlan_tag: "{{ primary_interface.split('.')[1] }}"
      when: vlan_check.stdout | int > 0

    - name: Find the secondary interface (assume it's the next available interface)
      set_fact:
        secondary_interface: "{{ ansible_facts['ansible_interfaces'] | difference([primary_interface]) | first }}"

    - name: Create bond interface with mode LACP or active-backup
      nmcli:
        conn_name: "bond0"
        ifname: "bond0"
        type: "bond"
        mode: "{{ bond_mode }}"
        ip4: "{{ ansible_default_ipv4.address }}/{{ ansible_default_ipv4.network }}"
        gw4: "{{ ansible_default_ipv4.gateway }}"
        state: up
      vars:
        bond_mode: lacp   # Set to either 'lacp' or 'active-backup'
      notify: restart network

    - name: Add primary interface to bond
      nmcli:
        conn_name: "{{ primary_interface }}-bond"
        ifname: "{{ primary_interface }}"
        master: bond0
        state: up

    - name: Add secondary interface to bond
      nmcli:
        conn_name: "{{ secondary_interface }}-bond"
        ifname: "{{ secondary_interface }}"
        master: bond0
        state: up

    - name: Check if VLAN needs to be bonded
      when: vlan_check.stdout | int > 0
      block:
        - name: Create VLAN on bond
          nmcli:
            conn_name: "bond0.{{ vlan_tag }}"
            ifname: "bond0.{{ vlan_tag }}"
            type: vlan
            vlan_id: "{{ vlan_tag }}"
            state: up

    - name: Test bond by pinging the gateway
      ansible.builtin.ping:
        count: 5
        dest: "{{ ansible_default_ipv4.gateway }}"
      register: ping_result
      ignore_errors: yes

    - name: Revert bond if ping fails
      when: ping_result is failed
      block:
        - name: Remove bond
          nmcli:
            conn_name: "bond0"
            state: absent
        
        - name: Remove VLAN on bond (if present)
          when: vlan_check.stdout | int > 0
          nmcli:
            conn_name: "bond0.{{ vlan_tag }}"
            state: absent

        - name: Restore original network connections
          nmcli:
            conn_name: "{{ primary_interface }}"
            state: up

        - name: Restore secondary interface
          nmcli:
            conn_name: "{{ secondary_interface }}"
            state: up

  handlers:
    - name: Restart network
      service:
        name: NetworkManager
        state: restarted



<INSTALL>
lang en_US
<KEYBOARD>
timezone America/Chicago
rootpw --iscrypted $1$Cr77L9On$4ih6z6vnhn72P4j7LJvyo0 
reboot --eject
text
selinux --disabled
firewall --disabled
skipx
firstboot --disable
auth --enableshadow --passalgo=sha512
<REPO_URL>
bootloader --location=mbr --append="nofb quiet splash=quiet"
%include /var/log/diskpart.cfg
%packages --ignoremissing
@base
bind
bind-chroot
device-mapper-multipath
chrony
cpp
deltarpm
dmidecode
expect
ftp
gcc
glibc-devel
glibc-headers
iotop
iptraf
kernel-devel
kernel-headers
ksh
libstdc++-devel
lldpad
jq
net-tools
vsftpd
wget
xinetd
%end

### PRE KICKSTART SECTION
%pre --interpreter=/bin/bash --log=/var/log/kickstart-pre.log
echo "*** Pre kickstart starting ***"
IP="<IP>"
NETMASK="<NETMASK>"
GATEWAY="<GATEWAY>"
CIDR="<CIDR>"
VLAN="<VLAN>"
RHEL_RELEASE="<OS_VER>"
RHEL_VER=$(echo ${RHEL_RELEASE}|cut -d'.' -f1)
HARDWARE="<HARDWARE>"

if [[ -z ${HARDWARE} ]]; then
    HARDWARE=$(dmidecode -s system-manufacturer|awk '{print tolower($0)}')
fi

load_rpm () {
    echo "Install racadm or ilorest binary from iso"
    cd /run/install/repo/prekickstart
    for i in $(ls -1 *.rpm) ;do
        echo "Installing ${i} ..."
        rpm -ivUh --nodeps ${i}
        if [[ $? != 0 ]] ; then
            echo " - FAIL, ${i} failed to install. (exit code: $? )"
            exit 1
        else
            echo " - PASS, ${HARDWARE} rpm installed successfully"
            if [[ ${HARDWARE} != "dell" ]]; then
                LOG_TO_LOM='/usr/sbin/ilorest serverlogs --selectlog=IML -m'
            else    
                LOG_TO_LOM='/opt/dell/srvadmin/sbin/racadm lclog worknote add -m'
            fi
        fi    
    done
}

check_interface() {
    local IFACE=$1
    echo "Testing interface ${IFACE} ..."
    if [[  -z ${VLAN} ]]; then
        ip addr add ${IP}/${CIDR} dev ${IFACE}
    else
        local VLAN_IFACE="${IFACE}.${VLAN}"
        ip link add link ${IFACE} name $VLAN_IFACE type vlan id ${VLAN}
        ip addr add ${IP}/${CIDR} dev $VLAN_IFACE
    fi
    ip route add default via ${GATEWAY}
    
    # Test connectivity
    ping -c 3 ${GATEWAY} >/dev/null
    if [[ $? == 0 ]]; then
        echo " - PASS, sending IML"
        ${LOG_TO_LOM} 'ZTP:KS:Pre_primary_network_check_PASS'
        return 0
    else
        echo "- FAIL, Network test FAILED for ${IFACE}."
        ${LOG_TO_LOM} 'ZTP:KS:Pre_primary_network_check_FAIL'
        return 1
    fi
}

find_nic() {
    IFACE=$(ip -br link|awk '{IGNORECASE=1}/<MAC>/{print $1}'|sort -u)
    if [[ -z ${IFACE} ]]; then
        echo "- FAIL, Unable to get the interface with MAC <MAC> ..."
    fi
    check_interface ${IFACE}
    if [[ $? != 1 ]]; then
        echo "Config INTERFACE ${IFACE}"
        cat << EOF > /tmp/network-ks.cfg
network --device=${IFACE} --bootproto static --ip=<IP> --netmask=<NETMASK> --gateway=<GATEWAY> --nameserver=<DNS1>,<DNS2> --hostname=<SERVERNAME> --vlanid='<VLAN>' --activate
EOF
    else
        NICS=$(ls /sys/class/net|grep -Ev "lo|${IFACE}")
        MSG="ZTP:KS:WARNING: Primary ${IFACE} failed. Checking interfaces ${NICS}"
        ${LOG_TO_LOM} "${MSG}"

        WORKING_IFACE_FOUND=false
        for i in ${NICS}; do
            echo "FOR LOOP CODE CHECK on ${i}"
            sleep 5
            check_interface ${i}
            if [[ $? != 1 ]]; then
                MSG="ZTP:KS:WARNING: NON standard Interface ${i} is working!"
                ${LOG_TO_LOM} "${MSG}"
                cat << EOF > /tmp/network-ks.cfg
network --device=${i} --bootproto static --ip=<IP> --netmask=<NETMASK> --gateway=<GATEWAY> --nameserver=<DNS1>,<DNS2> --hostname=<SERVERNAME> --vlanid='<VLAN>' --activate
EOF
                WORKING_IFACE_FOUND=true
                break
            fi
        done

        if [[ "${WORKING_IFACE_FOUND}" == false ]]; then
            ${LOG_TO_LOM} 'ZTP:KS:Pre_primary_network_check_FAIL'
            exit 1
        fi
    fi
}

load_rpm
find_nic
%end

%include /tmp/network-ks.cfg
